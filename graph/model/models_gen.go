// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateJobInput struct {
	Title      string            `json:"title"`
	Desc       string            `json:"desc"`
	Difficulty Difficulty        `json:"difficulty"`
	Milestones []*MilestoneInput `json:"milestones"`
}

type CreateUserInput struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	PhotoURL string `json:"photoUrl"`
}

type JobEdge struct {
	Node   *Job   `json:"node"`
	Cursor string `json:"cursor"`
}

type JobsConnection struct {
	TotalCount int        `json:"totalCount"`
	Edges      []*JobEdge `json:"edges"`
	PageInfo   *PageInfo  `json:"pageInfo"`
}

type JobsFilterInput struct {
	Status    []*JobStatus `json:"status"`
	Skills    []*string    `json:"skills"`
	SortOrder *SortOrder   `json:"sortOrder"`
}

type MilestoneInput struct {
	Title      string     `json:"title"`
	Desc       string     `json:"desc"`
	Resolution string     `json:"resolution"`
	Duration   string     `json:"duration"`
	Status     *JobStatus `json:"status"`
	Skills     []*string  `json:"skills"`
}

type NotificationConnection struct {
	TotalCount  int                 `json:"totalCount"`
	UnreadCount int                 `json:"unreadCount"`
	Edges       []*NotificationEdge `json:"edges"`
	PageInfo    *PageInfo           `json:"pageInfo"`
}

type NotificationEdge struct {
	Node   *NotificationItem `json:"node"`
	Cursor string            `json:"cursor"`
}

type PageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   *string `json:"endCursor"`
}

type SearchResult struct {
	Jobs  []*Job  `json:"jobs"`
	Users []*User `json:"users"`
}

type UpdateJobInput struct {
	ID         string            `json:"id"`
	Title      string            `json:"title"`
	Desc       string            `json:"desc"`
	Difficulty Difficulty        `json:"difficulty"`
	Status     JobStatus         `json:"status"`
	Milestones []*MilestoneInput `json:"milestones"`
}

type UpdateUserInput struct {
	Email      *string   `json:"email"`
	Name       *string   `json:"name"`
	Role       *string   `json:"role"`
	Department *string   `json:"department"`
	Bio        *string   `json:"bio"`
	Contact    *string   `json:"contact"`
	Skills     []*string `json:"skills"`
}

type UserStats struct {
	Completed int `json:"completed"`
	Ongoing   int `json:"ongoing"`
	Created   int `json:"created"`
}

type ApplicationStatus string

const (
	ApplicationStatusPending   ApplicationStatus = "PENDING"
	ApplicationStatusRejected  ApplicationStatus = "REJECTED"
	ApplicationStatusAccepted  ApplicationStatus = "ACCEPTED"
	ApplicationStatusWithdrawn ApplicationStatus = "WITHDRAWN"
)

var AllApplicationStatus = []ApplicationStatus{
	ApplicationStatusPending,
	ApplicationStatusRejected,
	ApplicationStatusAccepted,
	ApplicationStatusWithdrawn,
}

func (e ApplicationStatus) IsValid() bool {
	switch e {
	case ApplicationStatusPending, ApplicationStatusRejected, ApplicationStatusAccepted, ApplicationStatusWithdrawn:
		return true
	}
	return false
}

func (e ApplicationStatus) String() string {
	return string(e)
}

func (e *ApplicationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationStatus", str)
	}
	return nil
}

func (e ApplicationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Difficulty string

const (
	DifficultyEasy         Difficulty = "EASY"
	DifficultyIntermediate Difficulty = "INTERMEDIATE"
	DifficultyHard         Difficulty = "HARD"
)

var AllDifficulty = []Difficulty{
	DifficultyEasy,
	DifficultyIntermediate,
	DifficultyHard,
}

func (e Difficulty) IsValid() bool {
	switch e {
	case DifficultyEasy, DifficultyIntermediate, DifficultyHard:
		return true
	}
	return false
}

func (e Difficulty) String() string {
	return string(e)
}

func (e *Difficulty) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Difficulty(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Difficulty", str)
	}
	return nil
}

func (e Difficulty) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobStatus string

const (
	JobStatusOpen      JobStatus = "OPEN"
	JobStatusOngoing   JobStatus = "ONGOING"
	JobStatusCompleted JobStatus = "COMPLETED"
)

var AllJobStatus = []JobStatus{
	JobStatusOpen,
	JobStatusOngoing,
	JobStatusCompleted,
}

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusOpen, JobStatusOngoing, JobStatusCompleted:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeApplicationCreated   NotificationType = "APPLICATION_CREATED"
	NotificationTypeApplicationAccepted  NotificationType = "APPLICATION_ACCEPTED"
	NotificationTypeApplicationRejected  NotificationType = "APPLICATION_REJECTED"
	NotificationTypeApplicationWithdrawn NotificationType = "APPLICATION_WITHDRAWN"
	NotificationTypeApplicationRemoved   NotificationType = "APPLICATION_REMOVED"
	NotificationTypeCommentAdded         NotificationType = "COMMENT_ADDED"
	NotificationTypeMilestoneCompleted   NotificationType = "MILESTONE_COMPLETED"
)

var AllNotificationType = []NotificationType{
	NotificationTypeApplicationCreated,
	NotificationTypeApplicationAccepted,
	NotificationTypeApplicationRejected,
	NotificationTypeApplicationWithdrawn,
	NotificationTypeApplicationRemoved,
	NotificationTypeCommentAdded,
	NotificationTypeMilestoneCompleted,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeApplicationCreated, NotificationTypeApplicationAccepted, NotificationTypeApplicationRejected, NotificationTypeApplicationWithdrawn, NotificationTypeApplicationRemoved, NotificationTypeCommentAdded, NotificationTypeMilestoneCompleted:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderNewest SortOrder = "NEWEST"
	SortOrderOldest SortOrder = "OLDEST"
)

var AllSortOrder = []SortOrder{
	SortOrderNewest,
	SortOrderOldest,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderNewest, SortOrderOldest:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
