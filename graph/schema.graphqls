type Query {
    # To fetch all the jobs with or without filter
    allJobs(
        filter: JobsFilterInput
    ): [Job]
    # To get the job details based on job id
    Job(
        id: Int!
    ): Job
    # To get user information with user id with or without
    # job status filter (open/ongoing/completed)
    User (
        id: Int!
        jobsStatusFilter: JobStatus
    ): User
}
type Mutation {
    # To update the user information like name, email ...
    updateUserProfile(user: UpdateUserInput): User
    # To create a user after github auth with email, name and photo url
    createUserProfile(user: CreateUserInput): User
    # To create a new job
    createJob(job: CreateJobInput): Job
    # To update a job
    updateJob(job: UpdateJobInput): Job
    # To delete a job
    deleteJob(jobID: ID!): Job
    # To add a comment to a job
    addCommentToJob(comment: String!, jobID: ID!): Comment
    # To update a comment based on a comment id
    updateComment(id: ID!, comment: String!): Comment
    # To delete a comment based on comment id
    deleteCommment(id: ID!) : Comment
    # Create an application to a job, user id obtained through auth
    createJobApplication(jobID: ID!): Application
    # To withdraw application from a job
    deleteJobApplication(jobID: ID!): Application
    # create, accept or reject applicants
    updateJobApplication(applicantID: ID!, jobID: ID!, status: ApplicationStatus): Application
}
# For updating a job
input UpdateJobInput {
    id: ID!
    title: String!
    desc: String!
    difficulty: Difficulty!
    status: JobStatus!
    milestones: [MilestoneInput]!
}
# For creating a new job
input CreateJobInput {
    title: String!
    # assuming this is automatically handled by the resolver
    # createdBy: User!
    desc: String!
    difficulty: Difficulty!
    milestones: [MilestoneInput]!
}

input MilestoneInput {
    title: String!
    desc: String!
    resolution: String!
    duration: String!
    status: JobStatus
    skills: [String]!
}

# For creating a new user
input CreateUserInput {
    email: String!
    name: String!
    photoUrl: String!
}
# For updating user information
input UpdateUserInput {
    id: ID!
    email: String
    name: String
    role: String
    department: String
    bio: String
    contact: String
    skills: [String]
}
type Job {
    id: ID!
    title: String!
    createdBy: User!
    desc: String!
    duration: String!
    difficulty: Difficulty!
    status: JobStatus!
    timeCreated: String!
    timeUpdated: String!
    discussion: Discussions
    milestones: Milestones
    applications: Applications
}

type Discussions {
    totalCount: Int
    discussions: [Comment]
}

type Milestones {
    totalCounnt: Int
    milestones: [Milestone]!
}

type Applications {
    pendingCount: Int
    acceptedCount: Int
    rejectedCount: Int
    applications: [Application]
}

type Application {
    id: ID!
    applicant: User!
    status: ApplicationStatus!
    # Any message to be conveyed to the applicant
    note: String
    createdOn: String!
}

type User {
    id: ID!
    email: String!
    name: String!
    role: String!
    department: String!
    photoUrl: String!
    bio: String
    contact: String
    skills: [Skill]
    timeCreated: String!
    timeUpdated: String!
    # Jobs created by the user
    createdJobs: [Job!]
    # Jobs user has applied to
    appliedJobs: [Job!]
    # Number of jobs the user has taken/working on/completed
    jobStats: UserStats!
}

type Comment {
    id: ID!
    timeCreated: String!
    timeUpdated: String!
    content: String!
    isDeleted: Boolean!
    createdBy: User!
}

type Milestone {
    id: ID!
    job: Job!
    title: String!
    timeCreated: String!
    timeUpdated: String!
    desc: String!
    resolution: String!
    duration: String!
    status: JobStatus
    assignedTo: User
    skills: [Skill]!
}

type Skill {
    id: ID!
    createdBy: User!
    value: String!
    createdTime: String!
}

type UserStats {
    completed: Int!
    ongoing: Int!
    created: Int!
}

input JobsFilterInput {
    status: [JobStatus]
    skills: [String]
    sortOrder: SortOrder
}

enum SortOrder {
    NEWEST
    OLDEST
}

enum JobStatus {
    OPEN
    ONGOING
    COMPLETED
}

enum ApplicationStatus {
    PENDING
    REJECTED
    ACCEPTED
    WITHDRAWN
}

enum Difficulty {
    EASY
    INTERMEDIATE
    HARD
}