type Query {
    # To fetch all the jobs with or without filter
    allJobs(
        filter: JobsFilterInput
    ): [Job]
    # To get the job details based on job id
    Job(
        id: ID!
    ): Job
    Jobs(
        filter: JobsFilterInput
        limit: Int!
        after: ID
    ) : JobsConnection
    # To get user information with user id with or without
    # job status filter (open/ongoing/completed)
    User (
        id: ID!
        jobsStatusFilter: JobStatus
    ): User
    Skills(
        query: String!
        limit: Int
    ):[Skill!]!
    # For search based on job and user with the query string as input
    Search(
        query: String!,
        limit: Int
    ): SearchResult

    ViewerNotifications(
        limit: Int!
        after: ID
    ):NotificationConnection
}

type Mutation {
    updateProfile(user: UpdateUserInput): User

    createJob(job: CreateJobInput): Job

    updateJob(job: UpdateJobInput): Job

    deleteJob(jobID: ID!): Job

    addCommentToJob(comment: String!, jobID: ID!): Comment

    updateComment(id: ID!, comment: String!): Comment

    deleteComment(id: ID!) : Comment

    createJobApplication(jobID: ID!): [Application]

    deleteJobApplication(jobID: ID!): [Application]

    updateJobApplication(applicantID: ID!, jobID: ID!, status:
    ApplicationStatus, note: String): [Application]

    authenticate(githubCode: String!): UserAuthenticationPayload

    refreshToken(token: String!): UserAuthenticationPayload

    toggleMilestoneCompleted(milestoneID: String!) : Milestone

    toggleJobCompleted(jobID: String!) : Job

    createMilestonePerformanceReview(review: ReviewInput!, milestoneId: ID!): Review

    updateMilestonePerformanceReview(review: ReviewInput!, id: ID!): Review

    restoreJobsBackup(jobs: [CreateJobInput!]!): [Job!]!

    markAllViewerNotificationsRead: [NotificationItem!]!
    markViewerNotificationsRead(ids: [ID!]!): [NotificationItem!]!
}

input ReviewInput {
    rating: Int!
    remark: String
}

type JobsConnection {
    totalCount: Int!
    edges: [JobEdge!]!
    pageInfo: PageInfo
}

type PageInfo {
    hasNextPage: Boolean!,
    endCursor: ID
}

type JobEdge {
    node: Job!
    cursor: ID!
}

type UserAuthenticationPayload {
    profile: User!
    token: String!
    refreshToken: String!
}

# For updating a job
input UpdateJobInput {
    id: ID!
    title: String!
    desc: String!
    difficulty: Difficulty!
    status: JobStatus!
    milestones: [MilestoneInput]!
}
# For creating a new job
input CreateJobInput {
    title: String!
    desc: String!
    difficulty: Difficulty!
    milestones: [MilestoneInput]!
}

input MilestoneInput {
    title: String!
    desc: String!
    resolution: String!
    duration: String!
    status: JobStatus
    skills: [String]!
}

# For creating a new user
input CreateUserInput {
    email: String!
    name: String!
    photoUrl: String!
}
# For updating user information
input UpdateUserInput {
    email: String
    name: String
    role: String
    department: String
    bio: String
    contact: String
    skills: [String]
}

type Job {
    id: ID!
    title: String!
    createdBy: User!
    desc: String!
    skills: [Skill!]
    duration: String!
    difficulty: Difficulty!
    status: JobStatus!
    timeCreated: String!
    timeUpdated: String!
    discussion: Discussions
    milestones: Milestones
    applications: Applications
    viewerHasApplied: Boolean!
}

type Review {
    id: ID!
    rating: Int!
    remark: String
    createdFor: User!
    timeCreated: String!
    timeUpdated: String!
}

type Discussions {
    totalCount: Int
    discussions: [Comment]
}

type Milestones {
    totalCount: Int
    milestones: [Milestone]!
}

type Applications {
    pendingCount: Int
    acceptedCount: Int
    rejectedCount: Int
    applications: [Application]
}

type Application {
    id: ID!
    applicant: User!
    status: ApplicationStatus!
    milestone: Milestone!
    # Any message to be conveyed to the applicant
    note: String
    createdOn: String!
}

type User {
    id: ID!
    onboarded: Boolean!
    email: String!
    name: String!
    role: String!
    department: String!
    photoUrl: String!
    githubUrl: String!
    githubId: ID!
    githubName: String!
    bio: String
    contact: String
    skills: [Skill]
    timeCreated: String!
    timeUpdated: String!
    # Jobs created by the user
    createdJobs: [Job!]
    # Jobs user has applied to
    appliedJobs: [UserJobApplication!]
    # Number of jobs the user has taken/working on/completed
    jobStats: UserStats!
    reviews: [JobReview]!
    overallRating: Int
}

type JobReview {
    job: Job!,
    milestoneReview: [MilestoneReview]!,
}

type MilestoneReview {
    review : Review,
    milestone: Milestone!
}

type SearchResult {
    jobs: [Job!]
    users: [User!]
}

type UserJobApplication {
    applicationStatus: ApplicationStatus!
    userJobStatus: JobStatus!
    job: Job!
}

type Comment {
    id: ID!
    timeCreated: String!
    timeUpdated: String!
    content: String!
    isDeleted: Boolean!
    createdBy: User!
}

type Milestone {
    id: ID!
    job: Job!
    title: String!
    timeCreated: String!
    timeUpdated: String!
    desc: String!
    resolution: String!
    duration: String!
    status: JobStatus
    assignedTo: User
    review: Review
    skills: [Skill]!
}

type Skill {
    id: ID!
    createdBy: User!
    value: String!
    createdTime: String!
}

type UserStats {
    completed: Int!
    ongoing: Int!
    created: Int!
}


type NotificationConnection {
    totalCount: Int!
    unreadCount: Int!
    edges: [NotificationEdge!]!
    pageInfo: PageInfo
}

type NotificationEdge {
    node: NotificationItem!
    cursor: ID!
}


type NotificationItem {
    id: ID!
    recipient: User!
    sender: User!
    type: NotificationType!
    read: Boolean!
    job: Job!
    timeCreated: String!
}



input JobsFilterInput {
    status: [JobStatus]
    skills: [String]
    sortOrder: SortOrder
}

enum SortOrder {
    NEWEST
    OLDEST
}

enum NotificationType {
    APPLICATION_CREATED
    APPLICATION_ACCEPTED
    APPLICATION_REJECTED
    APPLICATION_WITHDRAWN
    APPLICATION_REMOVED
    COMMENT_ADDED
    MILESTONE_COMPLETED
}

enum JobStatus {
    OPEN
    ONGOING
    COMPLETED
}

enum ApplicationStatus {
    PENDING
    REJECTED
    ACCEPTED
    WITHDRAWN
}

enum Difficulty {
    EASY
    INTERMEDIATE
    HARD
}